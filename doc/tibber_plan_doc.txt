MCU:
I will go with STM32 F - series. There are low power, robust, reasonable priced MCU-s in that series.
I do not have hardware at home at the moment, so my solution will be without MCU specific code.

Environment:
I chose C language with cMake, Unity test and cMock (with Ceedling build system in Ruby environment). 
I could integrate it to VS Code.
For STM32 specific code, I would use EMbitz IDE or STM-Cube. 
Depends, if we want to use CubeÂ´s HAL or the direct register accessing defines in ST libraries.

FreeRTOS:
- Tx and Rx will be done in uart interrupt
- FreeRTOS task will go to sleep (Delay or Suspend) after Tx and Rx started
- Callback will wake up the task at the end of the Tx and Rx transactions
- Waking up with notification, it is fast and low consumption and only this task will receive it
- Other tasks can run, because communication is nonblocking. No polling is needed
- Timeout needs to be set. 
----Either in FreeRTOS level (Delay) or watchdog or some other timer during the communication

Running on battery powered device:
- Minimize heavy calculations and processor usage
----Just do the minimal data parsing. Converting text to numbers can happen on the server/computer
----Send short data to server/computer
----No polling, using interrupts instead
----Consider saving the extract of the data to persistent memory. 
--------Handheld device can be powered off (or go to low power mode), 
--------data will be kept and transferred in bulk to server. 
----Optimize code.

Format:
A string will be sent, then the computer can parse it properly.
{ID:[id];L1:[volts]:[amps];L2:[volts]:[amps];L3:[volts]:[amps];TS:[timestamp];}
for example:
"{ID:LGZ4ZMF100AC.M29CRLF;L1:231:00.000;L2:231:00.000;L3:231:00.000;TS:59-59-23-18-01-2024;}"
---timestamp is not necessary if it is a large overhead

Error handling:
- checking pointers against NULL
- checking callbacks against NULL. if it is NULL, then the watchdog or something shall wake up the sleeping task.
- error message to the task OR functions always return error code...
- parser should check if BAUD rate is valid. if not, then set the Data redaout message baud to 300
- parser should check if the message will fit in the given buffer by getting the buffer max size as a parameter
- NOW we expect the buffers to be large enough to all the applications

TX and RX:
- timeout should be set
- RX can be monitored with a timer


------------------------------------------------------------------------
Random notes:

Hello:
/?!CRLF

/ - Start character 0x2F
? - Transmission request command 0x3F
! - End character 0x21


Answer:
2F 4C 47 5A 34 5A 4D 46 31 30 30 41 43 2E 4D 32 39 0D 0A
Z = ID[4] -- baud

ACK:
ACK V   Z   Y  CR LF
4) 10) 13) 11) 3) 3)

ACK: 0x06
V: protocol control character 
	0 - normal protocol procedure.
	1 - secondary protocol procedure.
	2 - HDLC protocol procedure, see Annex E.
	3-9 - reserved for future applications.
Z: baud 
	0 - 300 Bd
	1 - 600 Bd
	2 - 1 200 Bd
	3 - 2 400 Bd
	4 - 4 800 Bd
	5 - 9 600 Bd
	6 - 19 200 Bd
Y: mode control character
	0 - data readout.
	1 - programming mode.
	2 - binary mode (HDLC), see Annex E.
	3-5 and A-Z - reserved for future applications.
	6-9 - manufacturer-specific use.
CR: carriage return 0x0D
LF: line feed 0x0A


STX: start of text 0x02
ETX: enf od text  0x03
BS: backspace  0x08

33322E37283233312A56290D0A
35322E37283233302A56290D0A
37322E37283233302A56290D0A
33312E372830302E3030302A41290D0A
35312E372830302E3030302A41290D0A
37312E372830302E3030302A41290D0A
